input {
  tcp {
    port => 8001
    codec => json_lines {
      charset => "UTF-8"
      ecs_compatibility => "v1"
      target => "parsed"
    }
  }
}

filter {
  json {
    source => "message"
    target => "parsed"
    skip_on_invalid_json => true
  }

  if "_jsonparsefailure" in [tags] {
    mutate {
      rename => { "message" => "event.original" }
      remove_tag => ["_jsonparsefailure"]
    }
  } else {
    mutate {
      rename => { "message" => "event.original" }
    }
  }

  
  
  if [parsed][message] == "HTTP Request" {
    mutate {
      rename => {
        "[parsed][http_method]" => "[http][request][method]"
        "[parsed][path]" => "[url][path]"
        "[parsed][status_code]" => "[http][response][status_code]"
        "[parsed][response_time_ms]" => "[event][duration]"
        "[parsed][client_ip]" => "[client][ip]"
        "[parsed][user_agent]" => "[user_agent][original]"
      }
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "web"
        "[event][type]" => "access"
      }
    }
  }
  
  if [url][path] {
    grok {
      match => { "[url][path]" => "/api/%{WORD:[service][name]}/%{WORD:[service][type]}/" }
      overwrite => ["service"]
    }
  }


  if ![parsed] {
    mutate {
      add_tag => ["invalid_json"]
      rename => { "message" => "original_message" }
    }
  } else {
    mutate {
      rename => {
        "[parsed][message]" => "message"
        "[parsed][level]" => "level"
        "[parsed][service]" => "service"
        "[parsed][response]" => "response"
        "[parsed][error]" => "error"
      }
      remove_field => ["message"]
    }
  }


  mutate {
    add_field => {
      "[ecs][version]" => "1.7.0"
    }
  }

  if [@timestamp] == "" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:@timestamp}" }
      tag_on_failure => []
    }
  }

  date {
    match => ["@timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }

  mutate {
    remove_tag => ["_dateparsefailure", "invalid_json"]
  }

  if [parsed][http_method] {
    mutate { add_field => { "log_type" => "http" } }
  } else {
    mutate { add_field => { "log_type" => "app" } }
  }

  mutate { remove_field => ["parsed", "message", "event.original"] }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "shopshop-logs-%{+YYYY.MM.dd}"
    retry_initial_interval => 2
  }

  stdout {
    codec => rubydebug {
    }
  }
}

